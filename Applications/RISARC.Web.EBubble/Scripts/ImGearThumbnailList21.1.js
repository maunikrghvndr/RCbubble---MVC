
//----------------------------------------------------------------------
// Copyright (c) 1996-2011 Accusoft Corporation.  All rights reserved. 
// </copyright>
//----------------------------------------------------------------------

Type.registerNamespace('ImageGear.Web.UI'); ImageGear.Web.UI.ImGearThumbnailLayout = function () { }; if (!window.Sys.Component) { ImageGear.Web.UI.ImGearThumbnailLayout.registerEnum = ImageGear.Web.regEnum; } ImageGear.Web.UI.ImGearThumbnailLayout.prototype = { VerticalScrollDirection: 0, HorizontalScrollDirection: 1 }; ImageGear.Web.UI.ImGearThumbnailLayout.registerEnum('ImageGear.Web.UI.ImGearThumbnailLayout', false); ImageGear.Web.UI.ImGearThumbnailSelectionMode = function () { }; if (!window.Sys.Component) { ImageGear.Web.UI.ImGearThumbnailSelectionMode.registerEnum = ImageGear.Web.regEnum; } ImageGear.Web.UI.ImGearThumbnailSelectionMode.prototype = { Single: 1, Multiple: 2 }; ImageGear.Web.UI.ImGearThumbnailSelectionMode.registerEnum('ImageGear.Web.UI.ImGearThumbnailSelectionMode', false); ImageGear.Web.UI.ImGearPageCountStatus = function () { }; if (!window.Sys.Component) { ImageGear.Web.UI.ImGearPageCountStatus.registerEnum = ImageGear.Web.regEnum; } ImageGear.Web.UI.ImGearPageCountStatus.prototype = { UnRequested: 0, RequestPending: 1, Known: 2, Failed: 3 }; ImageGear.Web.UI.ImGearPageCountStatus.registerEnum('ImageGear.Web.UI.ImGearPageCountStatus', false); ImageGear.Web.UI.ImGearPageCreateArgs = function () { }; if (!window.Sys.Component) { ImageGear.Web.UI.ImGearPageCreateArgs.registerClass = ImageGear.Web.regClass; } ImageGear.Web.UI.ImGearPageCreateArgs.prototype = {}; ImageGear.Web.UI.ImGearPageCreateArgs.registerClass('ImageGear.Web.UI.ImGearPageCreateArgs'); ImageGear.Web.UI.ImGearPage = function (ak) { this.ai = undefined; var eu = 0; var mh = ''; var gw = false; var G = this; var aP = new ImageGear.Web.UI.fh(); this.db = undefined; this.Ji = undefined; function Ac(o) { return !isNaN(o - 0); }; if (ak.pageNumber !== undefined) { if (Ac(ak.pageNumber)) { eu = ak.pageNumber; } else { throw new ImageGear.Web.UI.ImGearArgumentOutOfRangeException(aT, h, 'The value must be a number.'); } } if (ak.caption !== undefined) { ImageGear.bO.bB(ak.caption, 'caption', 'string'); mh = ak.caption; } if (ak.selected !== undefined) { gw = ak.selected; } this.jf = function () { return eu; }; this.JF = function (h) { if (Ac(ak.pageNumber)) { eu = h; } }; this.sV = function () { return gw; }; this.rQ = function (h) { if (gw !== h) { gw = h; this.ac('selected'); } }; this.uZ = function () { return mh; }; this.wX = function (h) { ImageGear.bO.iZ(h, 'caption'); mh = h; this.ac('caption'); }; this.IX = function () { return this.ai; }; this.eo = function (O) { aP.addHandler('propertyChanged', O); }; this.ha = function (O) { aP.removeHandler('propertyChanged', O); }; this.ac = function (bK) { var O = aP.getHandler('propertyChanged'); if (O) { O(this, new ImageGear.jh(bK)); } }; this.bv = function (al, C) { var O = aP.getHandler(al); if (O !== null) { try { O(G, C); } catch (e) { ImageGear.ds.sM('event raise, ImGearPage, error: ' + e); } } }; return this; }; ImageGear.Web.UI.ImGearPage.prototype = { get_pageNumber: function () { var T = this.jf(); return T; }, get_selected: function () { var T = this.sV(); return T; }, set_selected: function (value) { this.rQ(value); }, get_caption: function () { var T = this.uZ(); return T; }, set_caption: function (value) { this.wX(value); }, get_document: function () { var T = this.IX(); return T; }, add_propertyChanged: function (handler) { this.eo(handler); }, remove_propertyChanged: function (handler) { this.ha(handler); } }; if (!window.Sys.Component) { ImageGear.Web.UI.ImGearPage.registerClass = ImageGear.Web.regClass; } ImageGear.Web.UI.ImGearPage.registerClass('ImageGear.Web.UI.ImGearPage'); ImageGear.Web.UI.ImGearPageEventArgs = function () { return this; }; ImageGear.Web.UI.ImGearPageEventArgs.prototype = {}; if (!window.Sys.Component) { ImageGear.Web.UI.ImGearPageEventArgs.registerClass = ImageGear.Web.regClass; } ImageGear.Web.UI.ImGearPageEventArgs.registerClass('ImageGear.Web.UI.ImGearPageEventArgs'); ImageGear.Web.UI.ImGearPageCollection = function () { var G = this; var bg = []; var aP = new ImageGear.Web.UI.fh(); this.pV = false; this.wd = true; this.ai = undefined; this.CQ = function (aM) { this.HD(bg.length, aM); }; function gF(by) { if (by > bg.length - 1 || !(by >= 0)) { throw new ImageGear.Web.UI.ImGearArgumentOutOfRangeException('index', by, 'page index is out of range in the page collection'); } }; this.HD = function (by, aM) { var aZ; var yZ = false; var cC = bg.length; if (by > bg.length || !(by >= 0)) { throw new ImageGear.Web.UI.ImGearArgumentOutOfRangeException('index', by, 'index of the page Collection is out of range'); } if (G.wd && G.pV) { if (cC > 0) { throw new ImageGear.Web.UI.ImGearInvalidOperationException('You must first remove the existing selected page before adding a new one to the selected page collection).'); } } for (aZ = 0; aZ < cC; aZ++) { if (bg[aZ] === aM) { throw new ImageGear.Web.UI.ImGearInvalidOperationException('You cannot duplicate same page instance in a page collection).'); } } if (G.ai) { if (!aM.ai) { aM.ai = G.ai; } } aM.add_propertyChanged(jV); bg.splice(by, 0, aM); var C = new ImageGear.Web.UI.ImGearPageEventArgs(); C.imGearPage = aM; C.length = 1; G.bv('pageAdded', C); }; this.oz = function (by) { gF(by); var cf = bg[by]; return cf; }; this.Hi = function (by, aM) { gF(by); var sF = bg[by]; if (sF === aM) { return; } bg[by] = aM; var C = new ImageGear.Web.UI.ImGearPageEventArgs(); C.imGearPage = aM; C.length = 1; this.bv('pageAdded', C); sF.remove_propertyChanged(jV); var kp = new ImageGear.Web.UI.ImGearPageEventArgs(); kp.imGearPage = sF; kp.length = 1; this.bv('pageRemoved', kp); }; this.hw = function () { return bg.length; }; this.lq = function (iG, iF) { var xY = [].concat(bg); var k; for (k = 0; k < xY.length; k++) { iG.call(iF, xY[k], k, this); } }; this.xb = function (by) { gF(by); var C = new ImageGear.Web.UI.ImGearPageEventArgs(); C.imGearPage = bg[by]; bg[by].remove_propertyChanged(jV); C.length = 1; bg.splice(by, 1); G.bv('pageRemoved', C); }; this.Rw = function (aM) { var Sf = bg.length; for (var k = 0; k < Sf; k++) { if (aM === bg[k]) { return k; } } return -1; }; this.GE = function () { var k = 0; while (bg.length > 0) { this.xb(k); } }; function jV(aW, C) { var kp = new ImageGear.Web.UI.ImGearPageEventArgs(); kp.imGearPage = aW; kp.length = 1; G.bv('pageChanged', kp); }; this.nV = function (O) { aP.addHandler('pageAdded', O); }; this.qE = function (O) { aP.removeHandler('pageAdded', O); }; this.nJ = function (O) { aP.addHandler('pageChanged', O); }; this.nz = function (O) { aP.removeHandler('pageChanged', O); }; this.ok = function (O) { aP.addHandler('pageRemoved', O); }; this.ou = function (O) { aP.removeHandler('pageRemoved', O); }; this.bv = function (al, C) { var O = aP.getHandler(al); if (O !== null) { try { O(G, C); } catch (e) { ImageGear.ds.sM('raise event error in ImGearPageCollection, Error: ' + e); } } }; return this; }; ImageGear.Web.UI.ImGearPageCollection.prototype = { addPage: function (page) { this.CQ(page); }, insertPage: function (index, page) { this.HD(index, page); }, forEach: function (method, context) { this.lq(method, context); }, getPage: function (index) { return this.oz(index); }, setPage: function (index, page) { this.Hi(index, page); }, get_length: function () { return this.hw(); }, removePage: function (index) { this.xb(index); }, removeAllPages: function () { this.GE(); }, add_pageAdded: function (handler) { this.nV(handler); }, remove_pageAdded: function (handler) { this.qE(handler); }, add_pageChanged: function (handler) { this.nJ(handler); }, remove_pageChanged: function (handler) { this.nz(handler); }, add_pageRemoved: function (handler) { this.ok(handler); }, remove_pageRemoved: function (handler) { this.ou(handler); } }; if (!window.Sys.Component) { ImageGear.Web.UI.ImGearPageCollection.registerClass = ImageGear.Web.regClass; } ImageGear.Web.UI.ImGearPageCollection.registerClass('ImageGear.Web.UI.ImGearPageCollection'); ImageGear.Web.UI.ImGearDocumentCreateArgs = function () { return this; }; if (!window.Sys.Component) { ImageGear.Web.UI.ImGearDocumentCreateArgs.registerClass = ImageGear.Web.regClass; } ImageGear.Web.UI.ImGearDocumentCreateArgs.prototype = {}; ImageGear.Web.UI.ImGearDocumentCreateArgs.registerClass('ImageGear.Web.UI.ImGearDocumentCreateArgs'); ImageGear.Web.UI.ImGearDocument = function (ak) { var eb = ''; var dv = ''; var G = this; this.bg = new ImageGear.Web.UI.ImGearPageCollection(); this.bg.add_pageAdded(uK); this.bg.add_pageRemoved(rF); this.bg.add_pageChanged(jV); this.ih = undefined; this.bg.ai = this; var tf = false; this.jO = undefined; var dY = 0; var rd = ImageGear.Web.UI.ImGearPageCountStatus.UnRequested; var mh; var aP = new ImageGear.Web.UI.fh(); var RR = false; this.bv = function (al, C) { var O = aP.getHandler(al); if (O !== null) { try { O(G, C); } catch (e) { ImageGear.ds.sM('raise event error in ImGearDocument, error: ' + e); } } }; function uK(aW, C) { if (C.length > 0) { G.bv('pageAdded', C); } }; function rF(aW, C) { if (C.length > 0) { G.bv('pageRemoved', C); } }; function jV(aW, C) { G.bv('pageChanged', C); }; function HK() { var OU = false; this.AL = function () { return PU; }; this.OU = function (h) { PU = h; }; this.Pg = function () { return false; }; function BI(dw, fS) { var ad = dw + '() threw an exception '; if (fS.name) { ad += '( ' + fS.name + " "; } else { ad += "."; } if (fS.message) { ad += "  exception message = " + fS.message; } if (fS.statusCode) { ad += "  exception statusCode = " + fS.statusCode; } ad = ad.replace(/\n/g, " "); ImageGear.ds.fe(ad, ImageGear.Web.UI.DebugItemCause.Exception, ImageGear.Web.UI.DebugErrorLevel.Production, 'ImGearDocument', "document"); }; this.F = BI; this.bv = function (al, C) { var O = aP.getHandler(al); if (O !== null) { O(G, C); } }; }; if (arguments.length === 0) { var ad = "ImGearDocument object creation requires parameters"; throw new ImageGear.Web.UI.ImGearArgumentException('ImGearDocument', 'ImGearDocument object creation requires parameters.'); } if (arguments.length > 0) { if (ak.documentIdentifier !== undefined) { eb = ak.documentIdentifier; dv = ImageGear.dK.lP(eb); } if (ak.encodedDocumentIdentifier !== undefined) { var eT = ak.encodedDocumentIdentifier; if (ak.documentIdentifier !== undefined) { dv = ImageGear.dK.lP(eb); if (eT !== dv) { throw new ImageGear.Web.UI.ImGearArgumentException('documentIdentifier', 'When both are specified, documentIdentifier and encodedImageIdentifier must reference the same document.'); } } else { eb = ImageGear.dK.rK(ak.encodedDocumentIdentifier); } } if (ak.imageServicePath !== undefined) { this.jO = ak.imageServicePath; } else { throw new ImageGear.Web.UI.ImGearArgumentException('ImGearDocument', 'Document creation requires imageServicePath.'); } if (ak.includeAllPages !== undefined) { tf = ak.includeAllPages; if (tf === true) { var DR = new HK(); var ES = 0; G.bk = new ImageGear.dK(dv, 0, 0, 0, 0, 0); var hx = function () { dY = G.bk.dY; rd = ImageGear.Web.UI.ImGearPageCountStatus.Known; delete G.bk; G.bk = null; G.RR = DR.AL(); for (; ES < dY; ES++) { var bu = new ImageGear.Web.UI.ImGearPage({ pageNumber: ES, ai: G }); bu.ai = G; G.bg.addPage(bu); } }; rd = ImageGear.Web.UI.ImGearPageCountStatus.RequestPending; try { this.bk.sP(this.jO, DR, hx); } catch (e) { rd = ImageGear.Web.UI.ImGearPageCountStatus.Failed; var bW = new ImageGear.Web.UI.ImGearPageOpenFailedEventArgs(); bW.exception = e; G.bv('pageOpenFailed', bW); throw e; } } } else if (ak.pages !== undefined) { if (ak.pages.length > 0) { var k = 0; var aM; for (k = 0; k < ak.pages.length; k++) { var AC = ak.pages[k]; AC.document = this; this.bg.addPage(AC); } } } else if (ak.pageNumber !== undefined) { if (ak.pageRangeCount !== undefined) { var hC = ak.pageRangeCount; var fT; if (hC > 0) { var V; for (V = ak.pageNumber; V <= hC; V++) { fT = new ImageGear.Web.UI.ImGearPage(V); fT.ai = G; this.bg.addPage(fT); } } else if (hC === 0) { fT = new ImageGear.Web.UI.ImgearPage({ pageNumber: ak.pageNumber, ai: G }); fT.ai = G; G.bg.addPage(fT); } } else { if (ak.selected) { fT = new ImageGear.Web.UI.ImGearPage({ pageNumber: ak.pageNumber, ai: G, selected: true }); } else { fT = new ImageGear.Web.UI.ImGearPage({ pageNumber: ak.pageNumber, ai: G }); } fT.ai = G; G.bg.addPage(fT); } } } this.iQ = function () { return eb; }; this.lu = function () { return dv; }; this.CD = function () { return this.bg; }; this.BV = function () { return dY; }; this.Bw = function () { return rd; }; this.BQ = function () { return tf; }; this.Ix = function (h) { tf = h; this.ac('includeAllPages'); }; this.nV = function (O) { aP.addHandler('pageAdded', O); }; this.qE = function (O) { aP.removeHandler('pageAdded', O); }; this.ok = function (O) { aP.addHandler('pageRemoved', O); }; this.ou = function (O) { aP.removeHandler('pageRemoved', O); }; this.Be = function (O) { aP.addHandler('pageOpenFailed', O); }; this.Kg = function (O) { aP.removeHandler('pageOpenFailed', O); }; this.Ps = function (O) { aP.addHandler('artPageOpenFailed', O); }; this.Ow = function (O) { aP.removeHandler('artPageOpenFailed', O); }; this.eo = function (O) { aP.addHandler('propertyChanged', O); }; this.ha = function (O) { aP.removeHandler('propertyChanged', O); }; this.nJ = function (O) { aP.addHandler('pageChanged', O); }; this.nz = function (O) { aP.removeHandler('pageChanged', O); }; this.ac = function (bK) { var O = aP.getHandler('propertyChanged'); if (O) { O(this, new ImageGear.jh(bK)); } }; this.uZ = function () { return mh; }; this.wX = function (h) { mh = h; this.ac('caption'); }; return this; }; ImageGear.Web.UI.ImGearDocument.encodeDocumentIdentifier = function (eb) { var dv; if (eb !== undefined) { dv = ImageGear.dK.lP(eb); } return dv; }; ImageGear.Web.UI.ImGearDocument.decodeDocumentIdentifier = function (dv) { var zM; if (dv !== undefined) { zM = ImageGear.dK.rK(dv); } return zM; }; ImageGear.Web.UI.ImGearDocument.prototype = { get_documentIdentifier: function () { var T = this.iQ(); return T; }, get_encodedDocumentIdentifier: function () { var T = this.lu(); return T; }, get_pages: function () { return this.CD(); }, get_pageCountStatus: function () { var r = this.Bw(); return r; }, set_pageCountStatus: function (value) { this.Jh(value); }, get_pageCount: function () { var r = this.BV(); return r; }, get_includeAllPages: function () { try { var T = this.BQ(); return T; } catch (e) { throw e; } }, set_includeAllPages: function (value) { try { this.Ix(value); } catch (e) { throw e; } }, get_caption: function () { var T = this.uZ(); return T; }, set_caption: function (value) { this.wX(value); }, add_pageChanged: function (handler) { this.nJ(handler); }, remove_pageChanged: function (handler) { this.nz(handler); }, add_pageRemoved: function (handler) { this.ok(handler); }, remove_pageRemoved: function (handler) { this.ou(handler); }, add_pageAdded: function (handler) { this.nV(handler); }, remove_pageAdded: function (handler) { this.qE(handler); }, add_pageOpenFailed: function (handler) { this.Be(handler); }, remove_pageOpenFailed: function (handler) { this.Kg(handler); }, add_artPageOpenFailed: function (handler) { this.Ps(handler); }, remove_artPageOpenFailed: function (handler) { this.Ow(handler); }, add_propertyChanged: function (handler) { this.eo(handler); }, remove_propertyChanged: function (handler) { this.ha(handler); } }; if (!window.Sys.Component) { ImageGear.Web.UI.ImGearDocument.registerClass = ImageGear.Web.regClass; } ImageGear.Web.UI.ImGearDocument.registerClass('ImageGear.Web.UI.ImGearDocument'); ImageGear.Web.UI.ImGearDocumentEventArgs = function () { return this; }; if (!window.Sys.Component) { ImageGear.Web.UI.ImGearDocumentEventArgs.registerClass = ImageGear.Web.regClass; } ImageGear.Web.UI.ImGearDocumentEventArgs.prototype = {}; ImageGear.Web.UI.ImGearDocumentEventArgs.registerClass('ImageGear.Web.UI.ImGearDocumentEventArgs'); ImageGear.Web.UI.ImGearDocumentCollection = function () { var cs = []; var aP = new ImageGear.Web.UI.fh(); var G = this; function wB(aW, C) { if (C) { var pZ = new ImageGear.Web.UI.ImGearDocumentEventArgs(); pZ.document = aW; pZ.propertyName = C.get_propertyName(); pZ.length = 2; G.bv('documentChanged', pZ); } }; this.wA = function (kz) { this.Ig(cs.length, kz); }; this.Ig = function (by, ai) { var aZ; var yZ = false; var cC = cs.length; if (by > cs.length || !(by >= 0)) { throw new ImageGear.Web.UI.ImGearArgumentOutOfRangeException('index', by, 'document index is out of range'); } for (aZ = 0; aZ < cC; aZ++) { if (cs[aZ] === ai) { throw new ImageGear.Web.UI.ImGearInvalidOperationException('The document instance object to be inserted already exists in the collection. You cannot use the same instance of a document object.'); } } var qC = aP.getHandler('pageAdded'); if (qC) { ai.add_pageAdded(qC); } var oT = aP.getHandler('pageRemoved'); if (oT) { ai.add_pageRemoved(oT); } var qL = aP.getHandler('pageChanged'); if (qL) { ai.add_pageChanged(qL); } ai.add_propertyChanged(wB); cs.splice(by, 0, ai); var C = new ImageGear.Web.UI.ImGearDocumentEventArgs(); C.imGearDocument = ai; C.index = by; C.length = 1; this.bv('documentAdded', C); }; function gF(by) { if (by > cs.length - 1 || !(by >= 0)) { throw new ImageGear.Web.UI.ImGearArgumentOutOfRangeException('index', by, 'document index is out of range'); } }; this.Ia = function (by) { gF(by); return cs[by]; }; this.hw = function () { return cs.length; }; this.Kp = function (iG, iF) { var yK = [].concat(cs); var k; for (k = 0; k < yK.length; k++) { iG.call(iF, yK[k], k, this); } }; this.wV = function (by) { gF(by); var C = new ImageGear.Web.UI.ImGearDocumentEventArgs(); C.imGearDocument = cs[by]; C.length = 1; cs[by].get_pages().removeAllPages(); cs.splice(by, 1); this.bv('documentRemoved', C); }; this.Hf = function () { var k = 0; while (cs.length > 0) { this.wV(k); } }; this.Il = function (O) { aP.addHandler('documentAdded', O); }; this.Gz = function (O) { aP.removeHandler('documentAdded', O); }; this.Ca = function (O) { aP.addHandler('documentRemoved', O); }; this.Gx = function (O) { aP.removeHandler('documentRemoved', O); }; this.Hq = function (O) { aP.addHandler('documentChanged', O); }; this.GA = function (O) { aP.removeHandler('documentChanged', O); }; this.nV = function (O) { aP.addHandler('pageAdded', O); }; this.qE = function (O) { aP.removeHandler('pageAdded', O); for (var aZ = 0; aZ < cs.length; aZ++) { cs[aZ].remove_pageAdded(O) } }; this.nJ = function (O) { aP.addHandler('pageChanged', O); }; this.nz = function (O) { aP.removeHandler('pageChanged', O); for (var aZ = 0; aZ < cs.length; aZ++) { cs[aZ].remove_pageChanged(O) } }; this.ok = function (O) { aP.addHandler('pageRemoved', O); }; this.ou = function (O) { aP.removeHandler('pageRemoved', O); for (var aZ = 0; aZ < cs.length; aZ++) { cs[aZ].remove_pageRemoved(O) } }; this.bv = function (al, C) { var O = aP.getHandler(al); if (O !== null) { try { O(G, C); } catch (e) { ImageGear.ds.sM('event raise, ImGearDocumentCollection, error: ' + e); } } }; return this; }; ImageGear.Web.UI.ImGearDocumentCollection.prototype = { addDocument: function (imGearDocument) { this.wA(imGearDocument); }, insertDocument: function (index, imGearDocument) { this.Ig(index, imGearDocument); }, forEach: function (method, context) { this.lq(method, context); }, getDocument: function (index) { return this.Ia(index); }, get_length: function () { return this.hw(); }, removeDocument: function (imGearDocument) { this.wV(imGearDocument); }, removeAllDocuments: function () { this.Hf(); }, add_documentAdded: function (handler) { this.Il(handler); }, remove_documentAdded: function (handler) { this.Gz(handler); }, add_documentRemoved: function (handler) { this.Ca(handler); }, remove_documentRemoved: function (handler) { this.Gx(handler); }, add_documentChanged: function (handler) { this.Hq(handler); }, remove_documentChanged: function (handler) { this.GA(handler); }, add_pageAdded: function (handler) { this.nV(handler); }, remove_pageAdded: function (handler) { this.qE(handler); }, add_pageRemoved: function (handler) { this.ok(handler); }, remove_pageRemoved: function (handler) { this.ou(handler); }, add_pageChanged: function (handler) { this.nJ(handler); }, remove_pageChanged: function (handler) { this.nz(handler); } }; if (!window.Sys.Component) { ImageGear.Web.UI.ImGearDocumentCollection.registerClass = ImageGear.Web.regClass; } ImageGear.Web.UI.ImGearDocumentCollection.registerClass('ImageGear.Web.UI.ImGearDocumentCollection'); ImageGear.Web.UI.xB = function (ak) { this.be = undefined; var aP = new ImageGear.Web.UI.fh(); this.db = undefined; this.gG = undefined; this.mO = undefined; this.oZ = undefined; this.ca; this.je; this.an; this.nK = false; this.tj = 0; this.Kw; this.wh = false; this.HT = false; if (arguments.length > 0) { if (ak.page !== undefined) { this.be = ak.page; } } this.ac = function (bK) { var O = aP.getHandler('propertyChanged'); if (O) { O(this, new ImageGear.jh(bK)); } }; return this; }; ImageGear.Web.UI.Jl = function () { this.dO = new ImageGear.Web.UI.ImGearPageCollection(); this.IZ = 0; return this; }; ImageGear.Web.UI.Thumbnailcounter = 1; ImageGear.Web.UI.ImGearThumbnailList = function (element) { if (window.Sys.Component) { ImageGear.Web.UI.ImGearThumbnailList.initializeBase(this, [element]); } var G = this; var Jv = 0; var IR = 0; var ev = ''; var ql = ImageGear.Web.UI.ImGearArtDataServices.None; var gm = ''; var fm = null; var GT; var bz = []; var Jt = 0; var jO = ''; var fi = true; var Lx = false; var mo; var aP = new ImageGear.Web.UI.fh(); var mr = 'ImGearThumbnailList'; var hW = ImageGear.Web.UI.DebugErrorLevel.Production; var _debug = false; var vH = ImageGear.Web.UI.ImGearThumbnailSelectionMode.Single; var dB = ''; var jt = ''; var pm = 0; var Ln = 0; var Kl = 0; var gn = ImageGear.Web.UI.ImGearThumbnailLayout.VerticalScrollDirection; var og = 140; var kE = 124; var jT = 'gray'; var nR = 4; var iE = 4; var pP = 2; var pU = '#000000'; var xM = false; var JT = false; var ke = ""; var Ip = false; this.kr = new ImageGear.Web.UI.ImGearDocumentCollection(); var dO = new ImageGear.Web.UI.ImGearPageCollection(); var ve = '#FFDA6A'; var JN; var JY; dO.pV = true; function cO(jS) { if (!_debug) { return false; } return hW >= jS; }; this.F = function (dw, fS) { if (!cO(ImageGear.Web.UI.DebugErrorLevel.Production)) { return; } var ad = dw + '() threw an exception (' + fS.name + '), "' + fS.message + '"'; ad = ad.replace(/\n/g, " "); ImageGear.ds.fe(ad, ImageGear.Web.UI.DebugItemCause.Exception, ImageGear.Web.UI.DebugErrorLevel.Production, 'ImGearThumbnailList', (window.Sys.Component) ? this.Mn().id : this.get_igelement().id); }; this.ag = function (dw, dq, eL) { if (!cO(ImageGear.Web.UI.DebugErrorLevel.Development)) { return; } var ad = dw + '('; var k; for (k = 0; k < dq.length; k++) { if (k > 0) { ad += ', '; } ad += ImageGear.ds.fE(dq[k], (eL ? eL : 0)); } ad += ')'; this.gE(ad, ImageGear.Web.UI.DebugErrorLevel.Development); }; this.qB = function (dw, dq, ga, eL) { if (!cO(ImageGear.Web.UI.DebugErrorLevel.Development)) { return; } var ad = dw + '('; var k; for (k = 0; k < dq.length; k++) { if (k > 0) { ad += ', '; } ad += ImageGear.ds.fE(dq[k], (eL ? eL : 0)); } ad += ') = '; ad += ImageGear.ds.fE(ga, 1); this.gE(ad, ImageGear.Web.UI.DebugErrorLevel.Development); }; this.bh = function (dw, dq, ga) { if (!cO(ImageGear.Web.UI.DebugErrorLevel.Detailed)) { return; } var ad = dw + '('; var k; for (k = 0; k < dq.length; k++) { if (k > 0) { ad += ', '; } ad += ImageGear.ds.fE(dq[k], 0); } ad += ') = '; ad += ImageGear.ds.fE(ga, 1); this.gE(ad, ImageGear.Web.UI.DebugErrorLevel.Detailed); }; this.gE = function (cZ, bA) { ImageGear.ds.fe(cZ, ImageGear.Web.UI.DebugItemCause.FunctionCall, bA, 'ImGearThumbnailList', (window.Sys.Component) ? this.get_element().id : this.cb().id); }; this.fe = function (cZ) { ImageGear.ds.fe(cZ, ImageGear.Web.UI.DebugItemCause.Custom, ImageGear.Web.UI.DebugErrorLevel.Production, 'ImGearThumbnailList', (window.Sys.Component) ? this.get_element().id : this.cb().id); }; this.js = function () { return _debug; }; this.ow = function (h) { var ot = ! !h; if (_debug === ot) { return; } _debug = ot; this.ac('debug'); }; this.fZ = function () { return hW; }; this.ks = function (h) { ImageGear.bO.cX(h, 'value', ImageGear.Web.UI.DebugErrorLevel); if (hW === h) { return; } hW = h; this.ac('debugErrorLevel'); }; function ao(al, O) { aP.addHandler(al, O); }; function ax(al, O) { aP.removeHandler(al, O); }; this.eo = function (O) { aP.addHandler('propertyChanged', O); }; this.ha = function (O) { aP.removeHandler('propertyChanged', O); }; this.BL = function (O) { ao('thumbnailSelectionChanged', O); }; this.Kk = function (O) { ax('thumbnailSelectionChanged', O); }; this.JR = function (O) { ao('pageSelectionChanged', O); }; this.JE = function (O) { ax('pageSelectionChanged', O); }; this.Nx = function (O) { ao('pageAddFailed', O); }; this.Oc = function (O) { ax('pageAddFailed', O); }; var ht; this.cb = function () { return ht; }; this.jE = function (h) { ht = h; }; this.Mg = 0; this.OZ = 0; this.bv = function (al, C) { try { var O = aP.getHandler(al); if (O !== null) { O(G, C); } } catch (e) { G.F(al + 'Event', e); } }; function hG() { var gj, dA, cW; if (ev !== '') { gj = document.getElementById(ev); if (gj) { var nU = dO.get_length(); var k = 0; if (nU > 0) { cW = "{\"selectedPages\":["; for (k = 0; k < nU; k++) { if (dO.getPage(k)) { var Al = dO.getPage(k).ai.get_encodedDocumentIdentifier(); var zm = dO.getPage(k).get_pageNumber(); if (Al) { if (zm >= 0) { if (k > 0) { cW += ","; } cW += '{\"encodedDocumentIdentifier\":"' + Al; cW += '",\"pageNumber\":\"' + zm.toString() + "\""; cW += "}" } } } } cW += ']}'; } gj.value = cW; } } }; this.ac = function (bK) { var O = aP.getHandler('propertyChanged'); if (O) { O(this, new ImageGear.jh(bK)); } }; this.IP = function (DA) { if (ImageGear.Web.UI.Thumbnailcounter === undefined || ImageGear.Web.UI.Thumbnailcounter === null) { ImageGear.Web.UI.Thumbnailcounter = 1; } var dc = DA + '_' + ImageGear.Web.UI.Thumbnailcounter.toString(); ImageGear.Web.UI.Thumbnailcounter++; return dc; }; this.JM = function (DJ) { var dc = DJ + '_' + '_tViewId'; return dc; }; this.Dm = function () { if (pm === undefined || pm === null) { pm = 1; } var dc = ((window.Sys.Component) ? this.get_element().id.toString() : this.cb().id.toString()) + '_' + pm.toString(); pm++; return dc; }; function rr() { for (var V = 0; V < bz.length; V++) { if (bz[V]) { if (bz[V].ca) { bz[V].ca = false; if (bz[V].be) { bz[V].be.set_selected(false); for (var ay = 0; ay < dO.get_length() ; ay++) { if (dO.getPage(ay) === bz[V].be) { dO.removePage(ay); } } } if (fi === true) { document.getElementById(bz[V].db).style.backgroundColor = jT; } else { document.getElementById(bz[V].db).className = 'imGearTNItem'; } } } } }; function gP(rq, bN, bL) { if (bL) { if (bL.be) { if (rq === true) { if (bN) { bN.className = 'imGearTNSelected'; } bL.be.set_selected(true); bL.ca = true; } else { if (bN) { bN.className = 'imGearTNItem'; } bL.be.set_selected(false); bL.ca = false; } } } }; function gg(rq, bN, bL) { if (bL) { if (bL.be) { if (rq === true) { if (bN) { bN.style.backgroundColor = ve; } bL.be.set_selected(true); bL.ca = true; } else { if (bN) { bN.style.backgroundColor = jT; } bL.be.set_selected(false); bL.ca = false; } } } }; function xE(rq, bN, bL, fN) { if (fi === true) { if (G.get_selectionMode() === ImageGear.Web.UI.ImGearThumbnailSelectionMode.Single) { if (fN) { document.getElementById(fN.db).style.backgroundColor = jT; } gg(true, bN, bL); dO.removeAllPages(); } else if (G.get_selectionMode() === ImageGear.Web.UI.ImGearThumbnailSelectionMode.Multiple) { gg(false, bN, bL); } } else { if (G.get_selectionMode() === ImageGear.Web.UI.ImGearThumbnailSelectionMode.Single) { if (fN) { document.getElementById(fN.db).className = 'imGearTNItem'; } gP(true, bN, bL); dO.removeAllPages(); } else if (G.get_selectionMode() === ImageGear.Web.UI.ImGearThumbnailSelectionMode.Multiple) { gP(true, bN, bL); } } }; var qz = 0; var Qz = 1; var Rs = 1; var QE = 50; function DF(sender, eventArgs) { Po(); }; function xA(sender, eventArgs) { }; function Po() { var k, xB, aL, nf, OW; var OR, OK, Pr, RU; var OB, PD, RX, Oz; var OM = []; var Qb, OG, Pw, OE; if (jt === '') { return; } var OR = jt.scrollTop; var OK = jt.scrollLeft; var Pr = OR + jt.clientHeight; var RU = OK + jt.clientWidth; for (k = 0; k < bz.length; k++) { xB = bz[k]; if (xB && xB.gG) { aL = document.getElementById(xB.db); OB = aL.offsetTop; PD = aL.offsetLeft; RX = OB + aL.offsetHeight; Oz = PD + aL.offsetWidth; Qb = OR - RX; OG = OK - Oz; Pw = OB - Pr; OE = PD - RU; if (Qb >= 0) { OM.push({ xB: xB, PM: true, rM: Qb }); } else if (Pw < 0 && OG >= 0) { OM.push({ xB: xB, PM: true, rM: OG }); } else if (Pw >= 0) { OM.push({ xB: xB, PM: false, rM: Pw }); } else if (Qb < 0 && OE >= 0) { OM.push({ xB: xB, PM: false, rM: OE }); } else { nf = document.getElementById(xB.gG); if (nf) { OW = nf.dN; OW.Pm(0); } } } } OM.sort(function (a, b) { return a.rM - b.rM; }); for (k = 0; k < OM.length; k++) { xB = OM[k].xB; nf = document.getElementById(xB.gG); if (nf) { OW = nf.dN; if (k < Rs) { OW.Pm(0); } else if (k < QE) { OW.Pm(1); } else { OW.Pm(2); } } } }; function qF(sender, eventArgs) { if (eventArgs) { if (eventArgs.domEvent.button !== 0) { return; } } else if (sender.button !== 0) { return; } var Ko; var JP; var JU = 0; var hu = ""; var iB; var tO = ""; var bN; var Jd = false; if (sender.id !== "" && sender.id !== undefined && sender.id !== null) { iB = sender.id.split('_'); if (iB !== undefined) { if (((window.Sys.Component) ? G.get_element().id : G.cb().id) === iB[0]) { tO = sender.id; bN = sender; } } } else { if (sender.target) { if (sender.target.tagName === "DIV") { if (sender.target.firstChild.tagName === "DIV") { bN = sender.target; } } if (!bN) { if (sender.target.parentNode.id !== undefined && sender.target.parentNode.id !== "") { iB = sender.target.parentNode.id.split('_'); if (iB !== undefined) { if (((window.Sys.Component) ? G.get_element().id : G.cb().id) === iB[0]) { tO = sender.target.parentNode.id; bN = sender.target.parentNode; } else { return; } } else { return; } } else { if (sender.target.parentNode.parentNode.id !== undefined && sender.target.parentNode.parentNode.id !== "") { iB = sender.target.parentNode.parentNode.id.split('_'); if (iB !== undefined) { if (((window.Sys.Component) ? G.get_element().id : G.cb().id) === iB[0]) { tO = sender.target.parentNode.parentNode.id; bN = sender.target.parentNode.parentNode; } else { return; } } else { return; } } } } } else { var PN = (window.Sys.Component) ? sender.get_element() : sender.cb(); tO = PN.parentNode.id; bN = PN.parentNode; } } var fN; if (G.get_selectionMode() === ImageGear.Web.UI.ImGearThumbnailSelectionMode.Single) { for (V = 0; V < bz.length; V++) { if (bz[V].ca === true) { if (bz[V].be) { bz[V].be.set_selected(false); } if (fi === true) { document.getElementById(bz[V].db).style.backgroundColor = jT; } else { document.getElementById(bz[V].db).className = 'imGearTNItem'; } bz[V].ca = false; fN = bz[V]; break; } } } if (bN !== undefined) { var jp; var cu; var Ai = false; for (V = 0; V < bz.length; V++) { jp = undefined; if (bz[V].be) { jp = document.getElementById(bz[V].db); if (jp === bN) { Ai = true; cu = bz[V]; break; } } } if (Ai === true) { if (G.get_selectionMode() === ImageGear.Web.UI.ImGearThumbnailSelectionMode.Multiple) { if (eventArgs) { if (eventArgs.domEvent.ctrlKey === false) { rr(); } } else if (sender.ctrlKey) { if (sender.ctrlKey === false) { rr(); } } else { rr(); } } if (fi === true) { if (G.get_selectionMode() === ImageGear.Web.UI.ImGearThumbnailSelectionMode.Single) { if (fN) { document.getElementById(fN.db).style.backgroundColor = jT; } gg(true, bN, cu); dO.removeAllPages(); } else if (G.get_selectionMode() === ImageGear.Web.UI.ImGearThumbnailSelectionMode.Multiple) { if (eventArgs) { if (eventArgs.domEvent.ctrlKey === true) { if (cu.ca === true) { gg(false, bN, cu); } else { gg(true, bN, cu); } } else { gg(true, bN, cu); } } else if (sender.ctrlKey) { if (sender.ctrlKey === true) { if (cu.ca === true) { gg(false, bN, cu); } else { gg(true, bN, cu); } } else { gg(true, bN, cu); } } else { gg(true, bN, cu); } } } else { if (G.get_selectionMode() === ImageGear.Web.UI.ImGearThumbnailSelectionMode.Single) { if (fN) { document.getElementById(fN.db).className = 'imGearTNItem'; } gP(true, bN, cu); dO.removeAllPages(); } else if (G.get_selectionMode() === ImageGear.Web.UI.ImGearThumbnailSelectionMode.Multiple) { if (eventArgs) { if (eventArgs.domEvent.ctrlKey === true) { if (cu.ca === true) { gP(false, bN, cu); } else { gP(true, bN, cu); } } else { gP(true, bN, cu); } } else if (sender.ctrlKey) { if (sender.ctrlKey === true) { if (cu.ca === true) { gP(false, bN, cu); } else { gP(true, bN, cu); } } else { gP(true, bN, cu); } } else { gP(true, bN, cu); } } } hG(); sm(cu) } } }; function HL(FR, uS, zH) { function O(sender, evnt) { qF(sender, evnt); }; cr(zH, "mouseDown", O); uS.add_mouseDown(O); }; function vT(uS, wm) { function xA(sender, evnt) { HJ(wm); G.scrollToSelectedThumbnail(); Po(); }; uS.add_pageOpened(xA); }; function Rv(uS, wm) { function RG(sender, evnt) { var Pn = evnt.pageNumber; var DA = evnt.documentIdentifier; for (var V = 0; V < bz.length; V++) { if (bz[V].be.get_pageNumber() == Pn && bz[V].be.ai.get_documentIdentifier() === DA) { bz[V].HT = false; bz[V].wh = true; var bP; if (bz[V].je === false) { if (bz[V].gG) { bP = document.getElementById(bz[V].gG).dN; } if (bP) { bP.display(); bz[V].je = true; } } if (qz > 0) { qz = qz - 1; } break; } } Po(); if (qz == 0) { setTimeout(function () { QQ() }, 60); } }; uS.add_pageOpened(RG); }; function QQ() { var Qj; var qv = QR(); if (qv > 0) { Qj = qv; } else { Qj = QC(0); } if (Qj && Qj > 0) { if (Qj < bz.length) { RC(bz[Qj]); } } }; function QC(RF) { var PV; for (var ay = RF; ay < bz.length; ay++) { if (bz[ay].HT === false) { if (bz[ay].wh === false) { PV = ay; break; } } } if (PV) { return PV; } else { return -1; } }; function QR() { var Qo = document.getElementById(mo); var sU = (window.Sys.Component) ? G.get_element().id : G.cb().id; var bp = document.getElementById(sU); var bL = bz[0]; var dP = document.getElementById(bL.db); var OX; var bP; if (bz.length > 1) { var Sj = bz[1]; var Rz = document.getElementById(Sj.db); OX = Rz.offsetHeight + (dP.offsetTop * 2); } else { OX = dP.clientHeight + dP.clientTop + (dP.offsetTop * 2); } var Qf; if (OX > 0) { var vG = Math.ceil(Qo.offsetHeight / OX); var OD = Math.ceil(Qo.scrollTop / OX); var Ox = OD + vG + 2; OD = OD - 1; if (OD < 0) { OD = 0; } if (Ox >= bz.length) { Ox = bz.length - 1; } for (var V = OD; V <= Ox; V++) { if (bz[V].HT === false) { if (bz[V].wh === false) { Qf = V; break; } } } } if (Qf) { return Qf; } else { return (-1); } }; function Ll(uS, wm) { function Md(sender, evnt) { G.bv('pageAddFailed', evnt); }; uS.add_pageOpenFailed(Md); }; function bX(fB) { var kj = document.createElement('div'); var k; for (k in fB) { if (fB.hasOwnProperty(k)) { kj.style[k] = fB[k]; } } return kj; }; function LW(ar, aT) { if (ar.style[aT]) { return ar.style[aT]; } else if (ar.currentStyle) { return ar.currentStyle[aT]; } else if (document.defaultView && document.defaultView.getComputedStyle) { aT = aT.replace(/([A-Z])/g, "-$1"); aT = aT.toLowerCase(); var dW = document.defaultView.getComputedStyle(ar, ""); return dW && dW.getPropertyValue(aT); } else { return null; } }; function yD() { var sU = (window.Sys.Component) ? G.get_element().id : G.cb().id; var bp = document.getElementById(sU); var Km = bp.clientWidth; var JQ = 0; var jz = bp.clientWidth + iE + nR; var wp; var aL = ''; if (dB === '') { jt = bX({ width: bp.clientWidth + 'px', height: bp.clientHeight + 'px', position: 'relative', margin: '0px', border: '1px solid #000000', overflow: 'auto' }); if (fi === true) { if (gn === ImageGear.Web.UI.ImGearThumbnailLayout.HorizontalScrollDirection) { wp = kE; dB = bX({ width: wp + 'px', margin: '4px' }); jt.style.overflowY = 'hidden'; G.Mg = 1; if (wp > 0) { G.OZ = bp.clientWidth / wp; } } else { dB = bX({ width: bp.clientWidth + 'px', height: bp.clientHeight + 'px', position: 'relative', margin: '4px' }); jt.style.overflowX = 'hidden'; G.Mg = 1; if (kE > 0) { G.OZ = bp.clientWidth / kE; } G.Mg = bp.clientHeight / og; } } else { dB = bX({ width: bp.clientWidth + 'px', height: bp.clientHeight + 'px', position: 'relative', margin: '4px' }); if (gn === ImageGear.Web.UI.ImGearThumbnailLayout.HorizontalScrollDirection) { jt.style.overflowY = 'hidden'; } else { jt.style.overflowX = 'hidden'; } } jt.onscroll = DF; dB.setAttribute('id', sU + '_ListContainer'); jt.setAttribute('id', sU + '_ListWrapper'); mo = sU + '_ListWrapper'; jt.appendChild(dB); bp.appendChild(jt); } }; function ov(aM) { var hT; var xo = ''; var en = ''; var lw = ''; var hY = ""; if (ke !== "") { if (ke.indexOf('{') !== -1) { hT = ke.split('{'); if (hT.length > 0) { for (k = 0; k < hT.length; k++) { en = ''; lw = hT[k]; hY = ""; if (hT[k].indexOf('DC') !== -1) { en = aM.ai.get_caption(); if (en !== undefined) { hY = lw.replace(/DC\}/, aM.ai.get_caption()); } else { en = aM.ai.get_documentIdentifier(); hY = lw.replace(/DC\}/, aM.ai.get_documentIdentifier()); } } else if (hT[k].indexOf('PC') !== -1) { en = aM.get_caption(); if (en !== undefined && en !== "") { hY = lw.replace(/PC\}/, aM.get_caption()); } else { hY = lw.replace(/PC\}/, 'Page'); } } else if (hT[k].indexOf('P#') !== -1) { var lZ = aM.ai.get_pages(); var V = lZ.Rw(aM); var jz = V; if (typeof (jz) === 'number') { en = (V + 1).toString(); } else if (jz) { var zV = parseInt(jz); zV++; en = zV.toString(); } if (en !== null) { hY = lw.replace(/P#\}/, en); } } else if (hT[k].indexOf('PN') !== -1) { en = (aM.get_pageNumber() + 1).toString(); if (en !== null) { hY = lw.replace(/PN\}/, en); } } else if (hT[k].indexOf('PP') !== -1) { en = aM.ai.get_pages().get_length().toString(); if (en !== null) { hY = lw.replace(/PP\}/, en); } } xo += hY; } } } } return xo; }; function vr(ak) { var aM = ak; var QB = aM.get_pageNumber(); var aL; var nf; var bp = document.getElementById((window.Sys.Component) ? G.get_element().id : G.cb().id); var ba = null; var hu; var gM = []; var Js = []; var k = 0; var aZ = 0; var cC = G.get_documents().get_length(); for (aZ = 0; aZ < cC; aZ++) { ba = G.get_documents().getDocument(aZ); if (ba !== null) { hu = ba.ih; if (hu === aM.ai.ih) { break; } } } for (var ay = 0; ay < bz.length; ay++) { if (bz[ay].ai) { ba = bz[ay].ai; if (ay === 0) { gM[k] = ba; k++; continue; } else if (bz[ay - 1].ai != ba) { gM[k] = ba; k++; continue; } } } for (ay = bz.length - 1; ay >= 0; ay--) { if (bz[ay].be) { if (bz[ay].be === aM) { return; } } } var mK = true; var ff; var iq; var bu; for (ay = 0; ay < bz.length; ay++) { ff = bz[ay]; if (ff.tj === 1) { if (aM.ai.ih === ff.oZ) { aL = document.getElementById(ff.db); ff.tj = 0; iq = ff.db; mK = false; bu = ff; break; } } } var oJ = false; for (ay = bz.length - 1; ay >= 0; ay--) { if (bz[ay].be) { if (bz[ay].be.ai === aM.ai) { oJ = true; break; } } } if (dB === '') { yD(); } if (fi === false) { if (mK) { aL = document.createElement('div'); aL.className = 'imGearTNItem'; aL.style.styleFloat = 'left'; } lT = document.createElement('div'); lT.className = 'imGearTNItemCaption'; } if (fi === true) { if (mK) { aL = aL = bX({ width: kE + 'px', height: og + 'px', styleFloat: 'left', overflow: 'hidden', border: pP + 'px solid ' + pU, marginRight: iE + 'px', marginTop: nR + 'px' }); aL.style.cssFloat = 'left'; aL.style.backgroundColor = jT; } lT = bX({ width: kE + 'px', height: '30px', overflow: 'hidden', padding: '1px', position: 'relative', margin: '2px' }); } if (mK === true) { iq = aM.ai.ih + '_' + ImageGear.Web.UI.Thumbnailcounter.toString(); ImageGear.Web.UI.Thumbnailcounter++; aL.setAttribute('id', iq); } var ny = iq + '_' + '_tViewId'; if (fi === false) { nf = document.createElement('div'); nf.className = 'imGearTNImage'; } else { nf = bX({ width: (kE - 4) + 'px', height: (og - 40) + 'px', overflow: 'hidden', padding: '1px' }); } nf.setAttribute('id', ny); var uR = document.createElement("p"); if (fi === true) { uR.style.cssText = "font-family:arial,sans-serif;font-size:10pt;text-align: center;color:#000099;"; } var fU = ""; if (ke !== undefined && ke !== null && ke !== "") { fU = ov(aM); uR.innerHTML = fU; lT.appendChild(uR); } cr(lT, "mousedown", qF); cr(aL, "mousedown", qF); aL.appendChild(lT); aL.appendChild(nf); if (mK === true) { bu = new ImageGear.Web.UI.xB({ page: aM }); } aM.db = iq; bu.gG = ny; bu.db = iq; bu.be = aM; bu.oZ = hu; bu.ca = false; bu.je = false; bu.mO = lT; bu.an = undefined; bu.nK = false; bu.ai = aM.ai; bu.wh = false; bu.Pn = QB; var lB; var ll; var ar; if (mK) { if (bz.length === 0) { dB.appendChild(aL); bz.push(bu); } else { for (ay = 0; ay < bz.length; ay++) { ff = bz[ay]; if (ff.oZ === hu) { if (ff.be) { var bg = ff.be.ai.get_pages(); var Ov = bg.get_length(); var Si = ff.be.get_pageNumber(); if (QB < Si) { bz.splice(ay, 0, bu); ar = document.getElementById(ff.db); dB.insertBefore(aL, ar); lB = true; break; } } } } if (!lB) { dB.appendChild(aL); bz.push(bu); } } } var Jn = aL.style.backgroundColor; var Ad = false; if (gn === ImageGear.Web.UI.ImGearThumbnailLayout.HorizontalScrollDirection) { var gq = aL.clientWidth * (bz.length + 1); if (fi === true) { gq = aL.clientWidth * (bz.length + 1); gq += ((2 * iE) * (bz.length + 1)); dB.style.width = gq + 'px'; dB.style.height = (aL.clientHeight + (2 * iE)) + 'px'; } else { gq = aL.clientWidth * (bz.length + 1); dB.style.width = gq + 'px'; dB.style.height = aL.clientHeight + 'px'; if (G.Mg === 0) { if (aL.clientWidth > 0) { G.Mg = bp.width / aL.clientWidth; } } if (this.OZ === 0) { if (aL.clientHeight > 0) { G.Mg = bp.height / aL.clientHeight; } } } if ((bp.clientWidth + (aL.clientWidth * 4)) > gq) { Ad = true; } } else { if (bp.clientWidth > 0) { var zu = bp.clientWidth / (aL.clientWidth + (aL.clientLeft * 2)); var vG = bp.clientHeight / (aL.clientHeight + (aL.clientTop * 2)); G.Mg = vG; G.OZ = zu; if (bz.length < (zu * vG)) { Ad = true; } } } var ei; if (window.Sys.Component) { ei = $create(ImageGear.Web.UI.ThumbnailView, { 'pageViewClientID': gm, 'imageHandlerUrl': aM.ai.jO, 'selected': false }, {}, null, document.getElementById(ny)); } else { ei = new ImageGear.Web.UI.ThumbnailView(document.getElementById(ny)); if (ei) { ei.jE(document.getElementById(ny)); ei.initialize(); ei.set_imageHandlerUrl(aM.ai.jO); ei.set_selected(false); ei.set_pageViewClientID(gm); } } if (ei) { if (kv) { ei.set_resourcePath(kv); } Ll(ei, bu); ei.Ps(function (aW, C) { ba.bv('artPageOpenFailed', C); }); } var GP = G.get_artServiceOption(); HL(qF, ei, aL); var nU = dO.get_length(); if (nU > 0) { for (k = 0; k < nU; k++) { for (ay = 0; ay < bz.length; ay++) { ff = bz[ay]; if (ff.be) { if (ff.be.ai.get_documentIdentifier() === dO.getPage(k).ai.get_documentIdentifier()) { if (dO.getPage(k).get_pageNumber === aM.get_pageNumber()) { vT(ei, bu); break; } } } } } } else { if (aM.get_selected()) { vT(ei, bu); } } Rv(ei, bu); var countOfThumbnailsForThisDocument = 0; for (var thumbnailIndex = 0; thumbnailIndex < bz.length; thumbnailIndex++) { if (bz[thumbnailIndex].be) { var existingPageDocument = bz[thumbnailIndex].be.ai; var newPageDocument = aM.ai; if (existingPageDocument.get_documentIdentifier().toString() == newPageDocument.get_documentIdentifier().toString()) countOfThumbnailsForThisDocument++; } if (countOfThumbnailsForThisDocument > 1) break; } if (countOfThumbnailsForThisDocument < 2) { ei.openPage({ encodedDocumentIdentifier: aM.ai.get_encodedDocumentIdentifier(), pageNumber: aM.get_pageNumber(), artServiceOption: GP, isImageSVGType: aM.ai.RR }); bu.HT = true; qz++; } var lZ = aM.ai.get_pages(); if (lZ.get_length() > 1) { for (var dp = 0; dp < bz.length; dp++) { var bc = bz[dp]; if (bc.be) { if (aM.ai === bc.be.ai) { fU = ov(bc.be); var pF = bc.Kj.firstChild; if (!pF.igPreviousCaption || pF.igPreviousCaption !== fU) { pF.innerHTML = fU; pF.igPreviousCaption = fU; } } } } } nf.dN = ei; return aL; }; function Ct(zo) { var iq = zo.ih + '_' + ImageGear.Web.UI.Thumbnailcounter.toString(); ImageGear.Web.UI.Thumbnailcounter++; var aL; var ba; var gM = []; var sU = (window.Sys.Component) ? G.get_element().id : G.cb().id; var bp = document.getElementById(sU); var hu; var cC = G.get_documents().get_length(); for (aZ = 0; aZ < cC; aZ++) { ba = G.get_documents().getDocument(aZ); if (ba) { hu = ba.ih; if (hu === zo.ih) { break; } } } var k = 0; for (var ay = 0; ay < bz.length; ay++) { if (bz[ay].ai) { ba = bz[ay].ai; if (ay === 0) { gM[k] = ba; k++; continue; } else if (bz[ay - 1].ai != ba) { gM[k] = ba; k++; continue; } } } if (dB === '') { yD(); } if (fi === false) { aL = document.createElement('div'); aL.className = 'imGearTNItem'; aL.style.styleFloat = 'left'; } else if (fi === true) { aL = aL = bX({ width: kE + 'px', height: og + 'px', styleFloat: 'left', overflow: 'hidden', border: pP + 'px solid ' + pU, marginRight: iE + 'px', marginTop: nR + 'px' }); aL.style.cssFloat = 'left'; aL.style.backgroundColor = jT; } aL.setAttribute('id', iq); var bu = new ImageGear.Web.UI.xB(); bu.db = iq; bu.oZ = hu; bu.ca = false; bu.je = false; bu.an = undefined; bu.nK = false; bu.tj = 1; bu.ai = ba; bu.wh = false; var aZ = 0; var ll; cC = G.get_documents().get_length(); for (aZ = 0; aZ < cC; aZ++) { ba = G.get_documents().getDocument(aZ); if (gM[aZ]) { if (ba === gM[aZ]) { continue; } else { if (aZ + 1 < cC) { var wN = G.get_documents().getDocument(aZ + 1); if (wN === gM[aZ]) { ll = aZ; break; } } } } } if (ll) { var hC = 0; for (k = 0; k < ll; k++) { if (G.get_documents().getDocument(k).get_pages()) { hC += G.get_documents().getDocument(k).get_pages().get_length(); } } var mF = bz[hC]; var ar = document.getElementById(mF.db); dB.insertBefore(aL, ar); bz.splice(hC, 0, bu); } else { dB.appendChild(aL); bz.push(bu); } if (gn === ImageGear.Web.UI.ImGearThumbnailLayout.HorizontalScrollDirection) { var gq = aL.clientWidth * (bz.length + 1); if (fi === true) { gq = aL.clientWidth * (bz.length + 1); gq += ((2 * iE) * (bz.length + 1)); dB.style.width = gq + 'px'; dB.style.height = (aL.clientHeight + (2 * iE)) + 'px'; } else { gq = aL.clientWidth * (bz.length + 1); dB.style.width = gq + 'px'; dB.style.height = aL.clientHeight + 'px'; if (this.Mg === 0) { if (aL.clientWidth > 0) { G.Mg = bp.width / aL.clientWidth; } } if (G.OZ === 0) { if (aL.clientHeight > 0) { G.Mg = bp.height / aL.clientHeight; } } } } else { if (bp.clientWidth > 0) { var zu = bp.clientWidth / (aL.clientWidth + (aL.clientLeft * 2)); var vG = bp.clientHeight / (aL.clientHeight + (aL.clientTop * 2)); G.Mg = vG; G.OZ = zu; } } return aL; }; function uK(aW, C) { var aM = C.imGearPage; vr(aM); }; function Ci(ak) { var aM = ak.imGearPage; var bP; for (V = 0; V < bz.length; V++) { jp = undefined; if (bz[V].be) { if (bz[V].be === aM) { jp = document.getElementById(bz[V].db); if (jp) { if (bz[V].je === true) { bP = document.getElementById(bz[V].gG).dN; if (bP.get_selected()) { bP.set_selected(false); if (G.get_pageViewClientId()) { var pgView = document.getElementById(G.get_pageViewClientId()).dN; pgView.closePage(); } } bP.remove_mouseDown(qF); if (bP.get_currentState().documentIdentifier) { bP.dispose(); } bz[V].je = false; } if (bz[V].Kj) { ImGearRemoveHandler(jp.mO, "mousedown", qF); } jp.style.display = 'none'; bz.splice(V, 1); var lZ = aM.ai.get_pages(); if (lZ.get_length() >= 1) { for (var dp = 0; dp < bz.length; dp++) { var bc = bz[dp]; if (aM.ai === bc.be.ai) { if (bc.be) { fU = ov(bc.be); bc.mO.firstChild.innerHTML = fU; } } } } break; } } } } }; function rF(aW, C) { Ci(C); }; function jV(aW, C) { if (C) { for (var dp = 0; dp < bz.length; dp++) { var bc = bz[dp]; if (C.imGearPage === bc.be) { if (bc.be) { var fN; if (G.get_selectionMode() === ImageGear.Web.UI.ImGearThumbnailSelectionMode.Single) { for (var V = 0; V < bz.length; V++) { if (bz[V].ca === true) { if (bz[V].be) { bz[V].be.set_selected(false); } bz[V].ca = false; fN = bz[V]; break; } } } var fU = ov(bc.be); bc.mO.firstChild.innerHTML = fU; var bN = document.getElementById(bc.db); if (bc.be.get_selected() && !bc.ca) { bP = document.getElementById(bc.gG).dN; if (bP) { bP.set_selected(true); G.bv('pageSelectionChanged', {}); xE(true, bN, bc, fN); } } else if (!bc.be.get_selected() && bc.ca) { bP = document.getElementById(bc.gG).dN; if (bP) { bP.set_selected(false); G.bv('pageSelectionChanged', {}); xE(false, bN, bc, fN); } } break; } } } } }; function DS(aW, C) { if (C) { if (C.propertyName === 'caption') { for (var dp = 0; dp < bz.length; dp++) { var bc = bz[dp]; if (bc.be) { if (bc.be.ai) { if (C.imGearDocument) { if (C.imGearDocument === bc.be.ai) { var fU = ov(bc.be); bc.mO.firstChild.innerHTML = fU; } } } } } } } }; function tN() { if (!gm) { return; } if (!fm) { fm = document.getElementById(gm).dN; } if (!fm) { return; } var aR = G.kH(); if (aR.encodedDocumentIdentifier !== '') { fm.openPage({ set_documentIdentifier: aR.documentIdentifier, set_pageNumber: aR.pageNumber }); } }; function wA(ak) { if (G.xt() === false) { return null; } if ((gm !== null) && (gm !== '')) { fm = document.getElementById(gm).dN; } var ba = ak.imGearDocument; var CT = G.Dm(); ba.ih = CT; if (ba.get_includeAllPages() === false) { var bg = ba.get_pages(); var cC = bg.get_length(); if (cC > 0) { for (var V = 0; V < cC; V++) { if (!bg.getPage(V).ai) { bg.getPage(V).ai = ba; } } bg.forEach(vr); } } else { Ct(ba); } }; function Cp(aW, C) { wA(C); }; function sm(uC) { var V, bN; for (V = 0; V < bz.length; V++) { if (bz[V] === uC) { bN = document.getElementById(bz[V].db); if (fi === true) { gg(true, bN, bz[V]); } else { gP(true, bN, bz[V]); } if (G.get_selectionMode() === ImageGear.Web.UI.ImGearThumbnailSelectionMode.Single) { var bP; if (G.get_pageViewClientId()) { bP = document.getElementById(bz[V].gG).dN; if (bz[V].wh === false || dO.get_length() === 0) { if (G.get_artServiceOption() === ImageGear.Web.UI.ImGearArtDataServices.ArtDataService) { if (bz[V].be) { if (true) { if (bz[V].an) { bP.openPage({ encodedDocumentIdentifier: bz[V].be.ai.get_encodedDocumentIdentifier(), pageNumber: bz[V].be.get_pageNumber(), artPage: bz[V].an }); } } else { bP.openPage({ encodedDocumentIdentifier: bz[V].be.ai.get_encodedDocumentIdentifier(), pageNumber: bz[V].be.get_pageNumber(), artServiceOption: G.get_artServiceOption() }); } } } else { if (bz[V].HT === false) { if (bz[V].wh === false) { bz[V].an = bP.get_artPage(); if (bz[V].be) { if (bz[V].an) { bP.openPage({ encodedDocumentIdentifier: bz[V].be.ai.get_encodedDocumentIdentifier(), pageNumber: bz[V].be.get_pageNumber(), artPage: bz[V].an }); bz[V].HT = true; qz++; } else { bP.openPage({ encodedDocumentIdentifier: bz[V].be.ai.get_encodedDocumentIdentifier(), pageNumber: bz[V].be.get_pageNumber() }); bz[V].HT = true; qz++; } } } } } } if (bP) { bP.set_selected(true); G.bv('pageSelectionChanged', {}); } } if (bz[V].be) { if (dO.get_length() > 0) { dO.removeAllPages(); } } } if (bz[V].be) { dO.addPage(bz[V].be); } break; } } hG(); }; function RC(bL) { var bN; var bP; if (qz > 0) { if (bL.gG) { bP = document.getElementById(bL.gG).dN; } if (bP) { bP.display(); bL.je = true; } return; } bN = document.getElementById(bL.db); bP = document.getElementById(bL.gG).dN; if (bL.wh === false) { if (G.get_artServiceOption() === ImageGear.Web.UI.ImGearArtDataServices.ArtDataService) { if (bL.be) { if (bL.nK === true) { if (bL.an) { bP.openPage({ encodedDocumentIdentifier: bL.be.ai.get_encodedDocumentIdentifier(), pageNumber: bL.be.get_pageNumber(), artPage: bL.an }); } } else { bP.openPage({ encodedDocumentIdentifier: bL.be.ai.get_encodedDocumentIdentifier(), pageNumber: bL.be.get_pageNumber(), artServiceOption: G.get_artServiceOption() }); } bL.HT = true; qz++; } } else { bL.an = bP.get_artPage(); if (bL.be) { if (bL.an) { bP.openPage({ encodedDocumentIdentifier: bL.be.ai.get_encodedDocumentIdentifier(), pageNumber: bL.be.get_pageNumber(), artPage: bL.an }); } else { bP.openPage({ encodedDocumentIdentifier: bL.be.ai.get_encodedDocumentIdentifier(), pageNumber: bL.be.get_pageNumber() }); } bL.HT = true; qz++; } } } hG(); }; function HJ(uC) { var V, bN; var bL; for (V = 0; V < bz.length; V++) { bL = bz[V]; if (bL === uC) { bN = document.getElementById(bL.db); if (fi === true) { gg(true, bN, bL); } else { gP(true, bN, bL); } if (G.get_selectionMode() === ImageGear.Web.UI.ImGearThumbnailSelectionMode.Single) { var bP; if (G.get_pageViewClientId()) { bP = document.getElementById(bL.gG).dN; if (bP) { bP.set_selected(true); } } if (bL.be) { if (dO.get_length() > 0) { dO.removeAllPages(); } } } if (bL.be) { dO.addPage(bL.be); bL.ca = true; } break; } } hG(); }; this.cD = function () { var V, bN; var ff = bz[0]; var bg = ff.be.ai.get_pages(); var Ov = bg.get_length(); var cC = 10; if (Ov < 10) { cC = Ov; } if (bz.length > 10 && cC > 10) { cC = 9; } cC = bz.length; for (V = 0; V < cC; V++) { if (bz[V].be) { bN = document.getElementById(bz[V].db); var bP; bP = document.getElementById(bz[V].gG).dN; if (bz[V].je === false) { if (G.get_artServiceOption() === ImageGear.Web.UI.ImGearArtDataServices.ArtDataService) { if (bz[V].nK === true) { if (bz[V].an) { if (bz[V].wh === false) { bP.openPage({ encodedDocumentIdentifier: bz[V].be.ai.get_encodedDocumentIdentifier(), pageNumber: bz[V].be.get_pageNumber(), artPage: bz[V].an }); qz++; bz[V].HT = true; } } } else { if (bz[V].wh === false) { bP.openPage({ encodedDocumentIdentifier: bz[V].be.ai.get_encodedDocumentIdentifier(), pageNumber: bz[V].be.get_pageNumber(), artServiceOption: G.get_artServiceOption() }); qz++; bz[V].HT = true; } } } else { if (bz[V].imageDataRequested === false) { if (bz[V].wh === false) { if (qz == 0) { bP.openPage({ encodedDocumentIdentifier: bz[V].be.ai.get_encodedDocumentIdentifier(), pageNumber: bz[V].be.get_pageNumber() }); bz[V].HT = true; } } } } } if (bP) { bP.display(); if (bz[V].ca === true) { bP.set_selected(true); } } } } Po(); }; this.Ii = function () { var bL = bz[0]; var Mk; var KW = document.getElementById(bL.db); rr(); sm(bL); }; this.Io = function () { var bL = bz[bz.length - 1]; rr(); sm(bL); }; this.HF = function () { var bL; var lc; for (var V = 0; V < bz.length; V++) { lc = bz[V]; if (lc.ca === true) { bL = lc; break; } } if (!bL) { bL = bz[0]; } else { if (V <= bz.length - 1 && V > 0) { V--; bL = bz[V]; rr(); sm(bL); } } }; this.HN = function () { var bL; var ue; var V = bz.length - 1; for (V; V >= 0; V--) { ue = bz[V]; if (ue.ca === true) { bL = ue; break; } } if (!bL) { bL = bz[0]; } else { if (V <= bz.length - 2 && V >= 0) { V++; bL = bz[V]; rr(); sm(bL); } } }; this.Gw = function () { var ar = document.getElementById(mo); if (gn === ImageGear.Web.UI.ImGearThumbnailLayout.HorizontalScrollDirection) { ar.scrollLeft = 0; } else { ar.scrollTop = 0; } }; this.Fc = function () { var ar = document.getElementById(mo); if (gn === ImageGear.Web.UI.ImGearThumbnailLayout.HorizontalScrollDirection) { ar.scrollLeft = ar.scrollWidth; } else { ar.scrollTop = ar.scrollHeight; } }; this.FB = function () { var bL; var lc; var V; for (V = 0; V < bz.length; V++) { lc = bz[V]; if (lc.ca === true) { bL = lc; if (bL.wh === false) { sm(bL); } break; } } var yn; var ER; var dP; var ar = document.getElementById(mo); if (gn === ImageGear.Web.UI.ImGearThumbnailLayout.HorizontalScrollDirection) { yn = ar.scrollWidth; dP = document.getElementById(bL.db); ER = V * dP.clientWidth; ar.scrollLeft = dP.offsetLeft; } else { yn = ar.scrollHeight; dP = document.getElementById(bL.db); ar.scrollTop = dP.offsetTop; } }; this.EU = function () { var bL = bz[0]; var dP = document.getElementById(bL.db); var ar = document.getElementById(mo); var fL; if (gn === ImageGear.Web.UI.ImGearThumbnailLayout.HorizontalScrollDirection) { fL = ar.scrollLeft + dP.clientWidth + dP.clientLeft; ar.scrollLeft = fL; } else { fL = ar.scrollTop; ar.scrollTop = fL + dP.clientHeight + dP.clientTop; } }; this.FK = function () { var bL = bz[0]; var dP = document.getElementById(bL.db); var ar = document.getElementById(mo); var fL; if (gn === ImageGear.Web.UI.ImGearThumbnailLayout.HorizontalScrollDirection) { fL = ar.scrollLeft; fL = fL - (dP.clientWidth + dP.clientLeft); if (fL > 0) { ar.scrollLeft = fL; } else { ar.scrollLeft = 0; } } else { fL = ar.scrollTop - (dP.clientHeight + dP.clientTop); if (fL > 0) { ar.scrollTop = fL; } else { ar.scrollTop = 0; } } }; function Fx(wm) { var bP; bP = document.getElementById(wm.gG).dN; if (bP) { bP.saveArtPage(); } }; this.FW = function (zQ) { var bL; for (V = 0; V < bz.length; V++) { bL = bz[V]; Fx(bL); } if (zQ) { zQ(); } }; this.Dp = function () { aR = null; var V; var bL; if (G.kr.get_length() > 0) { G.kr.removeAllDocuments(); } bz = []; }; this.LQ = function () { return jO; }; this.JI = function (h) { ImageGear.bO.iZ(h, 'value'); jO = h; this.ac('imageServicePath'); }; this.oa = function () { return ev; }; this.oK = function (h) { ImageGear.bO.iZ(h, 'value'); ev = h; }; this.ym = function () { return gm; }; this.Ir = function () { return fi; }; this.IC = function (h) { fi = h; this.ac('useDefaultStyling'); }; this.CJ = function () { return pU; }; this.If = function (h) { pU = h; this.ac('thumbnailBorderColor'); }; this.CP = function () { return pP; }; this.Iw = function (h) { pP = h; this.ac('thumbnailBorderWidth'); }; this.kY = function (ka) { if (ka !== ImageGear.Web.UI.ImGearArtDataServices.None && ka !== ImageGear.Web.UI.ImGearArtDataServices.ArtDataService) { throw new ImageGear.Web.UI.ImGearArgumentException('type', 'The value must be a member of the ImageGear.Web.UI.ImGearArtDataServices enumeration.'); } ql = ka; }; this.kB = function () { return ql; }; this.AW = function () { return this.kr; }; this.JZ = function () { return ke; }; this.Hs = function (h) { ImageGear.bO.iZ(h, 'value'); ke = h; this.ac('thumbnailCaptionFormat'); }; this.ym = function () { return gm; }; this.HS = function (h) { if (gm !== h) { gm = h; fm = null; this.ac('pageViewClientId'); } }; this.Iy = function () { return gn; }; this.HQ = function (h) { gn = h; this.ac('thumbnailsLayout'); }; this.Bi = function () { return vH; }; this.HU = function (h) { if (h !== ImageGear.Web.UI.ImGearThumbnailSelectionMode.Multiple && h !== ImageGear.Web.UI.ImGearThumbnailSelectionMode.Single) { throw new ImageGear.Web.UI.ImGearArgumentException('type', 'The value must be a member of the ImageGear.Web.UI.ImGearThumbnailSelectionMode enumeration.'); } vH = h; if (vH === ImageGear.Web.UI.ImGearThumbnailSelectionMode.Multiple) { dO.wd = false; } this.ac('selectionMode'); }; this.xt = function () { return xM; }; this.wi = function (h) { xM = h; this.ac('enabled'); }; this.GL = function () { return kE; }; this.HA = function (h) { kE = h; this.ac('thumbnailWidth'); }; this.CF = function () { return og; }; this.Hv = function (h) { og = h; this.ac('thumbnailHeight'); }; this.AX = function () { return jT; }; this.GM = function (h) { jT = h; this.ac('thumbnailBackgroundColor'); }; this.Hu = function () { return ve; }; this.IB = function (h) { ve = h; this.ac('thumbnailSelectedBackgroundColor'); }; this.yY = function () { return iE; }; this.GN = function (h) { iE = h; this.ac('xSpacing'); }; this.GK = function () { return nR; }; this.GV = function (h) { nR = h; this.ac('ySpacing'); }; this.Cc = function () { return Ip; }; this.Bm = function () { return dO; }; var kv; this.iu = function (h) { kv = h; }; this.eh = function () { return kv; }; this.IA = function (Iu) { for (var dp = 0; dp < bz.length; dp++) { var bc = bz[dp]; if (Iu === bc.be) { var bP = document.getElementById(bc.gG).dN; if (bP) { return (bP.get_artPage()); } } } return null; }; this.initialize = function () { if (window.Sys.Component) { ImageGear.Web.UI.ImGearThumbnailList.callBaseMethod(this, 'initialize'); } GT = (window.Sys.Component) ? this.get_element().id : this.cb().id; var bp = (window.Sys.Component) ? this.get_element() : this.cb(); var k; for (k = bp.childNodes.length - 1; k >= 0; k--) { if (bp.childNodes[k].tagName !== 'INPUT') { bp.removeChild(bp.childNodes[k]); } } this.kr.add_documentAdded(Cp); this.kr.add_pageAdded(uK); this.kr.add_pageRemoved(rF); this.kr.add_pageChanged(jV); this.kr.add_documentChanged(DS); this.wi(true); bp.dN = this; }; }; ImageGear.Web.UI.ImGearThumbnailList.prototype = { dispose: function () { this.ag('dispose', arguments); this.Dp(); this.wi(false); if (window.Sys.Component) { ImageGear.Web.UI.ImGearThumbnailList.callBaseMethod(this, 'dispose'); } }, get_debug: function () { try { var T = this.js(); this.bh('get_debug', arguments, T); return T; } catch (e) { this.F('get_debug', e); throw e; } }, set_debug: function (value) { try { this.ag('set_debug', arguments); var gN = this.js(); this.ow(value); if (!gN) { this.ag('set_debug', arguments); } } catch (e) { this.F('set_debug', e); throw e; } }, get_debugErrorLevel: function () { try { var T = this.fZ(); this.bh('get_debugErrorLevel', arguments, T); return T; } catch (e) { this.F('get_debugErrorLevel', e); throw e; } }, set_debugErrorLevel: function (value) { try { this.ag('set_debugErrorLevel', arguments); var gN = this.fZ(); this.ks(value); if (gN < ImageGear.Web.UI.DebugErrorLevel.Development) { this.ag('set_debugErrorLevel', arguments); } } catch (e) { this.F('set_debugErrorLevel', e); throw e; } }, add_pageSelectionChanged: function (handler) { try { this.JR(handler); } catch (e) { this.F('add_pageSelectionChanged', e); throw e; } }, remove_pageSelectionChanged: function (handler) { try { this.JE(handler); } catch (e) { this.F('remove_pageSelectionChanged', e); throw e; } }, add_pageAddFailed: function (handler) { try { this.Nx(handler); } catch (e) { this.F('add_pageAddFailed', e); throw e; } }, remove_pageAddFailed: function (handler) { try { this.Oc(handler); } catch (e) { this.F('remove_pageAddFailed', e); throw e; } }, add_mouseDown: function (handler) { try { this.qt(handler); } catch (e) { this.F('add_mouseDown', e); throw e; } }, remove_mouseDown: function (handler) { try { this.qK(handler); } catch (e) { this.F('remove_mouseDown', e); throw e; } }, add_mouseMove: function (handler) { try { this.qb(handler); } catch (e) { this.F('add_mouseMove', e); throw e; } }, remove_mouseMove: function (handler) { try { this.qI(handler); } catch (e) { this.F('remove_mouseMove', e); throw e; } }, add_mouseUp: function (handler) { try { this.qP(handler); } catch (e) { this.F('add_mouseUp', e); throw e; } }, remove_mouseUp: function (handler) { try { this.pv(handler); } catch (e) { this.F('remove_mouseUp', e); throw e; } }, add_propertyChanged: function (handler) { try { this.add_propertyChanged(handler); } catch (e) { this.F('add_propertyChanged', e); throw e; } }, remove_propertyChanged: function (handler) { try { this.ha(handler); } catch (e) { this.F('remove_propertyChanged', e); throw e; } }, writeToLog: function (message) { try { this.fe(message); } catch (e) { this.F('writeToLog', e); throw e; } }, get_documents: function () { return this.AW(); }, get_controlStateElementId: function () { try { var T = this.oa(); this.bh('get_controlStateElementId', arguments, T); return T; } catch (e) { this.F('get_controlStateElementId', e); throw e; } }, set_controlStateElementId: function (value) { try { this.ag('set_controlStateElementId', arguments); this.oK(value); } catch (e) { this.F('set_controlStateElementId', e); throw e; } }, get_useDefaultStyling: function () { try { var T = this.Ir(); this.bh('get_get_useDefaultStyling', arguments, T); return T; } catch (e) { this.F('get_useDefaultStyling', e); throw e; } }, set_useDefaultStyling: function (value) { try { this.ag('set_useDefaultStyling', arguments); this.IC(value); } catch (e) { this.F('set_useDefaultStyling', e); throw e; } }, get_selectedPages: function () { try { var T = this.Bm(); this.bh('get_currentSelectedPages', arguments, T); return T; } catch (e) { this.F('get_currentSelectedPages', e); throw e; } }, get_artDataChanged: function () { try { var T = this.Cc(); this.bh('get_artDataChanged', arguments, T); return T; } catch (e) { this.F('get_artDataChanged', e); throw e; } }, get_xSpacing: function () { try { var T = this.yY(); this.bh('get_xSpacing', arguments, T); return T; } catch (e) { this.F('get_xSpacing', e); throw e; } }, set_xSpacing: function (value) { try { this.ag('set_xSpacing', arguments); this.GN(value); } catch (e) { this.F('set_xSpacing', e); throw e; } }, get_ySpacing: function () { try { var T = this.GK(); this.bh('get_ySpacing', arguments, T); return T; } catch (e) { this.F('get_ySpacing', e); throw e; } }, set_ySpacing: function (value) { try { this.ag('set_ySpacing', arguments); this.GV(value); } catch (e) { this.F('set_ySpacing', e); throw e; } }, get_thumbnailHeight: function () { try { var T = this.CF(); this.bh('get_thumbnailHeight', arguments, T); return T; } catch (e) { this.F('get_thumbnailHeight', e); throw e; } }, set_thumbnailHeight: function (value) { try { this.ag('set_thumbnailHeight', arguments); this.Hv(value); } catch (e) { this.F('set_thumbnailHeight', e); throw e; } }, get_thumbnailWidth: function () { try { var T = this.GL(); this.bh('get_thumbnailWidth', arguments, T); return T; } catch (e) { this.F('get_thumbnailWidth', e); throw e; } }, set_thumbnailWidth: function (value) { try { this.ag('set_thumbnailWidth', arguments); this.HA(value); } catch (e) { this.F('set_thumbnailWidth', e); throw e; } }, get_thumbnailBackgroundColor: function () { try { var T = this.AX(); this.bh('get_thumbnailBackgroundColor', arguments, T); return T; } catch (e) { this.F('get_thumbnailBackgroundColor', e); throw e; } }, set_thumbnailBackgroundColor: function (value) { try { this.ag('set_thumbnailBackgroundColor', arguments); this.GM(value); } catch (e) { this.F('set_thumbnailBackgroundColor', e); throw e; } }, get_thumbnailSelectedBackgroundColor: function () { try { var T = this.Hu(); this.bh('get_thumbnailSelectedBackgroundColor', arguments, T); return T; } catch (e) { this.F('get_thumbnailSelectedBackgroundColor', e); throw e; } }, set_thumbnailSelectedBackgroundColor: function (value) { try { this.ag('set_thumbnailSelectedBackgroundColor', arguments); this.IB(value); } catch (e) { this.F('set_thumbnailSelectedBackgroundColor', e); throw e; } }, get_thumbnailBorderWidth: function () { try { var T = this.CP(); this.bh('get_thumbnailBorderWidth', arguments, T); return T; } catch (e) { this.F('get_thumbnailBorderWidth', e); throw e; } }, set_thumbnailBorderWidth: function (value) { try { this.ag('set_thumbnailBorderWidth', arguments); this.Iw(value); } catch (e) { this.F('set_thumbnailBorderWidth', e); throw e; } }, get_thumbnailBorderColor: function () { try { var T = this.CJ(); this.bh('get_thumbnailBorderColor', arguments, T); return T; } catch (e) { this.F('get_thumbnailBorderColor', e); throw e; } }, set_thumbnailBorderColor: function (value) { try { this.ag('set_thumbnailBorderColor', arguments); this.If(value); } catch (e) { this.F('set_thumbnailBorderColor', e); throw e; } }, get_resourcePath: function () { try { var T = this.eh(); this.bh('get_resourcePath', arguments, T); return T; } catch (e) { this.F('get_resourcePath', e); throw e; } }, set_resourcePath: function (h) { try { this.ag('set_resourcePath', arguments); this.iu(h); } catch (e) { this.F('set_resourcePath', e); throw e; } }, get_pageViewClientId: function () { try { var T = this.ym(); this.bh('get_pageViewClientId', arguments, T); return T; } catch (e) { this.F('get_pageViewClientId', e); throw e; } }, set_pageViewClientId: function (value) { try { this.ag('set_pageViewClientId', arguments); this.HS(value); } catch (e) { this.F('set_pageViewClientId', e); throw e; } }, get_selectionMode: function () { try { var T = this.Bi(); this.bh('selectionMode', arguments, T); return T; } catch (e) { this.F('get_selectionMode', e); throw e; } }, set_selectionMode: function (value) { try { this.ag('set_selectionMode', arguments); this.HU(value); } catch (e) { this.F('set_selectionMode', e); throw e; } }, get_layout: function () { try { var T = this.Iy(); this.bh('getthumbnailsLayout', arguments, T); return T; } catch (e) { this.F('get_thumbnailsLayout', e); throw e; } }, set_layout: function (value) { try { this.ag('set_thumbnailsLayout', arguments); this.HQ(value); } catch (e) { this.F('set_thumbnailsLayout', e); throw e; } }, get_enabled: function () { try { var T = this.xt(); this.bh('get_enabled', arguments, T); return T; } catch (e) { this.F('get_enabled', e); throw e; } }, get_thumbnailCaptionFormat: function () { try { var T = this.yY(); this.bh('get_thumbnailCaptionFormat', arguments, T); return T; } catch (e) { this.F('get_thumbnailCaptionFormat', e); throw e; } }, set_thumbnailCaptionFormat: function (value) { try { this.ag('set_thumbnailCaptionFormat', arguments); this.Hs(value); } catch (e) { this.F('set_thumbnailCaptionFormat', e); throw e; } }, get_artServiceOption: function () { try { var T = this.kB(); this.bh('get_artServiceOption', arguments, T); return T; } catch (e) { this.F('get_artServiceOption', e); throw e; } }, set_artServiceOption: function (value) { try { this.ag('set_artServiceOption', arguments); this.kY(value); } catch (e) { this.F('set_artServiceOption', e); throw e; } }, selectPreviousThumbnail: function () { try { this.ag('selectPreviousThumbnail', arguments, 1); this.HF(); } catch (e) { this.F('selectPreviousThumbnail', e); throw e; } }, selectNextThumbnail: function () { try { this.ag('selectNextThumbnail', arguments, 1); this.HN(); } catch (e) { this.F('selectNextThumbnail', e); throw e; } }, selectFirstThumbnail: function () { try { this.ag('selectFirstThumbnail', arguments, 1); this.Ii(); } catch (e) { this.F('selectFirstThumbnail', e); throw e; } }, selectLastThumbnail: function () { try { this.ag('selectLastThumbnail', arguments, 1); this.Io(); } catch (e) { this.F('selectLastThumbnail', e); throw e; } }, scrollToNextBand: function () { try { this.ag('scrollToNextBand', arguments, 1); this.EU(); } catch (e) { this.F('scrollToNextBand', e); throw e; } }, scrollToPreviousBand: function () { try { this.ag('scrollToPreviousBand', arguments, 1); this.FK(); } catch (e) { this.F('scrollToPreviousBand', e); throw e; } }, scrollToFirstThumbnail: function () { try { this.ag('scrollToFirst', arguments, 1); this.Gw(); } catch (e) { this.F('scrollToFirst', e); throw e; } }, scrollToLastThumbnail: function () { try { this.ag('scrollToFirst', arguments, 1); this.Fc(); } catch (e) { this.F('scrollToFirst', e); throw e; } }, scrollToSelectedThumbnail: function () { try { this.ag('ScrollToSelectedThumbnail', arguments, 1); this.FB(); } catch (e) { this.F('ScrollToSelectedThumbnail', e); throw e; } }, saveArtData: function (onComplete) { try { this.ag('saveArtData', arguments, 1); this.FW(onComplete); } catch (e) { this.F('saveArtData', e); throw e; } }, getArtPage: function (page) { try { var T = this.IA(page); this.qB('getArtPage', arguments, T, 1); return T; } catch (e) { this.F('getArtPage', e); throw e; } }, display: function () { try { this.ag('display', arguments, 1); this.cD(); } catch (e) { this.F('display', e); throw e; } } }; if (!window.Sys.Component) { ImageGear.Web.UI.ImGearThumbnailList.registerClass = ImageGear.Web.regClass; } ImageGear.Web.UI.ImGearThumbnailList.registerClass('ImageGear.Web.UI.ImGearThumbnailList', Sys.UI.Control);